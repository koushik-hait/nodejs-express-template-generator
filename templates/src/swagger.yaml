openapi: 3.0.3
info:
  title: Proof of concept - Project API
  description: >-
    # pocapi.v1.0.0

    If you find API issues or bugs when testing, please create an [issue](https://github.com/koushik-hait/express-api-v01/issues) and assign it to a member of the development team.
  version: 1.2.0
  contact: {}
servers:
  - url: "https://koushikhait.site/api/v1"
paths:
  /healthcheck:
    get:
      tags:
        - Public API (default)
      summary: ⛑️ healthcheck
      description: >-
        This API endpoint is commonly used to determine the health status or
        availability of a system or service.


        It is a simple and lightweight endpoint designed to perform a quick
        health check of the application or infrastructure.
      operationId: healthcheck
      responses:
        "200":
          description: healthcheck
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: "true"
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: "77"
            Date:
              schema:
                type: string
                example: Thu, 01 Jun 2023 05:43:54 GMT
            ETag:
              schema:
                type: string
                example: W/"4d-HsIML77lP0nFnY+in7vJJjHcLbQ"
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: OK
                  message:
                    type: string
                    example: Health check passed
                  statusCode:
                    type: number
                    example: 200
                  success:
                    type: boolean
                    example: true
              examples:
                healthcheck:
                  value:
                    data: OK
                    message: Health check passed
                    statusCode: 200
                    success: true
  /user/register:
    post:
      tags:
        - Users API
      summary: Register a new user
      description: Registers a new user with the provided data
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
              email:
                type: string
              password:
                type: string
      responses:
        "201":
          description: Successful response
          schema:
            type: object
            properties:
              message:
                type: string
        "400":
          description: Bad request
          schema:
            type: object
            properties:
              error:
                type: string
  /user/login:
    post:
      tags:
        - Users API
      summary: Log in a user
      description: Logs in a user with the provided credentials
      parameters:
        - name: body
          in: body
          required: true
          schema:
            oneOf:
              - type: object
                properties:
                  username:
                    type: string
                  password:
                    type: string
              - type: object
                properties:
                  email:
                    type: string
                  password:
                    type: string
      responses:
        "200":
          description: Successful response
          schema:
            type: object
            properties:
              token:
                type: string
        "400":
          description: Bad request
          schema:
            type: object
            properties:
              error:
                type: string
  /user/logout:
    post:
      tags:
        - Users API
      summary: Log out a user
      description: Logs out a user by invalidating the session token
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              token:
                type: string
      responses:
        "200":
          description: Successful response
          schema:
            type: object
            properties:
              message:
                type: string
        "401":
          description: Unauthorized
          schema:
            type: object
            properties:
              error:
                type: string
  /blog/create:
    post:
      tags:
        - Blog App
      summary: Create a new blog post
      description: Endpoint to create a new blog post
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              title:
                type: string
              content:
                type: string
      responses:
        "201":
          description: Blog post created successfully
          schema:
            type: object
            properties:
              message:
                type: string
  /blog/update/{bid}:
    put:
      tags:
        - Blog App
      summary: Update a blog post
      description: Endpoint to update an existing blog post
      parameters:
        - name: bid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
      responses:
        "200":
          description: Blog post updated successfully
          schema:
            type: object
            properties:
              message:
                type: string
  /blog/delete/{bid}:
    delete:
      tags:
        - Blog App
      summary: Delete a blog post
      description: Endpoint to delete a blog post by ID
      parameters:
        - name: bid
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Blog post deleted successfully
